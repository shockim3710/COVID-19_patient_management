// win32 Visual C 2010 이상컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS
//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void DB_connect();
char* login();
int main_menu();
void sql_error();
int patient_management_menu();
int room_management_menu();
void AddPatient();
void update_patient(char userNum[6]);
void select_patient();
void add_room();
void select_room();
void update_room();
void delete_room();
int admin_menu();
void add_doctor_account();
void edit_doctor_account();
void add_nurse_account();
void edit_doctor_account2();
void edit_nurse_account();
void edit_nurse_account2();
void add_department();
void delete_department();
void delete_department2();
void DeletePatient(char userNum[6]);
void goLeave(char userNum[6]);

EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR uid[80];
   VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

// win32 Visual C 컴파일시 추가
#define getch() _getch()

void main()
{
   _putenv("NLS_LANG=American_America.KO16KSC5601");
   system("mode con cols=100 lines=30");   // 콘솔창 크기 조절
   static char userNum[6] = "none";

   DB_connect();
   
   do
   {
      strcpy(userNum, login());

      // 로그인 실패
      if (strcmp(userNum, "none")==0)
      {
         gotoxy(33,15);
         printf("로그인에 실패하였습니다.");
         gotoxy(33,17);
         printf("재 입력해 주세요.");
         getch();
         system("cls");
         printf("\n");
      }
   } while(strcmp(userNum, "none")==0);

   // 관리자 메뉴로 이동
   if (userNum[0] == 'M') {
		int choice = 0;
		do
		{
			system("cls");
			printf("\n");
			choice = admin_menu();

			switch (choice) {
			case 1:
				system("cls");
				add_doctor_account();
				getch();
				break;
			case 2:
				system("cls");
				edit_doctor_account();
				getch();
				break;
			case 3:
				system("cls");
				add_nurse_account();
				getch();
				break;
			case 4:
				system("cls");
				edit_nurse_account();
				getch();
				break;
			case 5:
				system("cls");
				add_department();
				getch();
				break;
			case 6:
				system("cls");
				delete_department();
				getch();
				break;
			deafult:
				gotoxy(33,15);
				printf("메뉴를 다시 입력해 주세요.");
				system("cls");
				printf("\n");
				getch();
				break;
			}
			system("mode con cols=100 lines=30");
		} while(choice != 7);
   }

   // 메인 메뉴로 이동
   if (userNum[0] == 'D' || userNum[0] == 'N') {
      int choice = 0;

      do
      {
         system("cls");
         printf("\n");
         choice = main_menu();
         
         switch(choice)
         {
            // 환자 관리
            case 1:
               int p_choice = 0;
               system("cls");
               printf("\n");
               do
               {
                  p_choice = patient_management_menu();
                  switch(p_choice)
                  {
                     // 환자 등록
                     case 1:
		if (userNum[0] == 'D')
		{
			gotoxy(30,10);
			printf("※ 환자 등록은 간호사만 가능합니다. ※");
			getch();
			break;
		}
                        AddPatient();
                        break;
                     // 환자 조회
                     case 2:
                        select_patient(userNum);
                        break;
                     // 환자 정보 수정
                     case 3:
		update_patient(userNum);
                        break;
                     // 환자 퇴원 처리
                     case 4:
		   if (userNum[0] == 'N')
		   {
		   	gotoxy(30,10);
		   	printf("※ 퇴원 처리는 담당 의사만 가능합니다. ※");
			getch();
			break;
		   }
		goLeave(userNum);
                        break;
                     // 환자 삭제
                     case 5:
		DeletePatient(userNum);
                        break;
                  }
                  system("mode con cols=100 lines=30");
                  system("cls");
                  printf("\n");
               } while (p_choice != 6);
               break;
            // 병실 관리
            case 2:
	   if (userNum[0] == 'D')
	   {
	   	gotoxy(30,10);
	   	printf("※ 병실 관리는 간호사만 가능합니다. ※");
		getch();
		break;
	   }
               int r_choice = 0;
               system("cls");
               printf("\n");
               do
               {
                  r_choice = room_management_menu();
                  switch(r_choice)
                  {
                     // 병실 추가
                     case 1:
		add_room();
                        break;
                     // 병실 조회
                     case 2:
		select_room();
                        break;
                     // 병실 정보 수정
                     case 3:
		update_room();
                        break;
                     // 병실 삭제
                     case 4:
		delete_room();
                        break;
                  }
                  system("cls");
                  printf("\n");
               } while (r_choice != 5);
               break;
         }
      } while(choice != 3);
   }
   
   system("cls");
   printf("\n");
   print_screen("end_page.txt");
   getch();
   
   EXEC SQL COMMIT WORK RELEASE ;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결을 종료함.

}


// DB 연결 함수
void DB_connect()
{
   strcpy((char *)uid.arr,"a20173152@//sedb.deu.ac.kr:1521/orcl");
   uid.len = (short) strlen((char *)uid.arr);
   strcpy((char *)pwd.arr,"20173152");
   pwd.len = (short) strlen((char *)pwd.arr);

   EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

   // connection이 실패했을경우의 처리부분

   if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405){ 
      printf("Connect error: %s", sqlca.sqlerrm.sqlerrmc);
      getch();
      exit(-1);
   }

    printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}


// 로그인 함수
char* login()
{
   static char userNum[6] = "none";

   EXEC SQL BEGIN DECLARE SECTION;
      varchar u_name_check[20] = {""};
      char u_emp_num_check[6] = {""};
      varchar u_position[255] = {""};
      varchar u_name[255] = {""};
      char u_emp_num[6] = {""};
   EXEC SQL END DECLARE SECTION;

   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

   print_screen("login_page.txt");

   gotoxy(49,7);
   //printf(" 이름을 입력하세요 : ");
   scanf("%s", u_name.arr);
   u_name.len = strlen(u_name.arr);
   
   gotoxy(49,10);
   //printf(" 사원 번호를 입력하세요 : ");
   scanf("%s", u_emp_num);
   
   u_position.len = strlen(u_position.arr);

   EXEC SQL SELECT TRIM(MANAGER_ID), MANAGER_PW
      into :u_name_check, :u_emp_num_check
      from H_MANAGER
      where MANAGER_ID = :u_name and MANAGER_PW = :u_emp_num;

   if (strcmp(u_name_check.arr, u_name.arr) == 0 && strcmp(u_emp_num_check, u_emp_num) == 0)
   {
      gotoxy(29,15);
      printf("관리자 로그인에 성공하였습니다!");
      gotoxy(29,17);
      printf("관리자님 환영합니다.");
      strcpy(userNum, "M");
      gotoxy(5,29);
      printf("계속하려면 아무 키나 누르세요..");
   }
   else
   {
      if (u_emp_num[0] == 'D')
      {
         EXEC SQL SELECT DOCTOR_NAME, DOCTOR_NUMBER, DOCTOR_POSITION
            into :u_name_check, :u_emp_num_check, :u_position
            from H_DOCTOR
            where DOCTOR_NAME = :u_name and DOCTOR_NUMBER = :u_emp_num;

         if (strcmp(u_name_check.arr, u_name.arr) == 0 && strcmp(u_emp_num_check, u_emp_num) == 0)
         {
            gotoxy(29,17);
            printf("로그인에 성공하였습니다!\n\n");
            gotoxy(29,19);
            printf("%s %s님 환영합니다.\n\n", u_name.arr, u_position.arr);
            strcpy(userNum, u_emp_num);
            gotoxy(5,29);
            printf("계속하려면 아무 키나 누르세요..");
         }
      }
      else if (u_emp_num[0] == 'N')
      {
         EXEC SQL SELECT NURSE_NAME, NURSE_NUMBER, NURSE_POSITION
            into :u_name_check, :u_emp_num_check, :u_position
            from H_NURSE
            where NURSE_NAME = :u_name and NURSE_NUMBER = :u_emp_num;

         if (strcmp(u_name_check.arr, u_name.arr) == 0 && strcmp(u_emp_num_check, u_emp_num) == 0)
         {
            gotoxy(29,17);
            printf("로그인에 성공하였습니다!\n\n");
            gotoxy(29,19);
            printf("%s %s님 환영합니다.\n\n", u_name.arr, u_position.arr);
            strcpy(userNum, u_emp_num);
            gotoxy(5,29);
            printf("계속하려면 아무 키나 누르세요..");
         }
      }
   }
   if(strcmp(userNum, "none") != 0) { getch(); }
   return userNum;
}


// 관리자 메뉴 선택 함수
int admin_menu()
{
	int choice = 0;

	print_screen("admin_menu.txt");

	gotoxy(54,9);
	//printf(" 관리자 메뉴를 선택하세요 : ");
	scanf("%d", &choice);

	return choice;
}


// 의사 계정 추가 함수
void add_doctor_account()
{
	while(1)
	{
		_putenv("NLS_LANG=American_America.KO16KSC5601");
		EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

		/* 의사 계정 추가 화면 */
		printf("\n");
		print_screen("add_doctor_account.txt");

		EXEC SQL BEGIN DECLARE SECTION;
		  char d_number[6]={""};
		  varchar d_name[255]={""};
		  varchar d_position[255]={""};
		  char d_deptno[6]={""};
		  varchar d_deptno_check[6] = {""};
		EXEC SQL END DECLARE SECTION;

		gotoxy(48,12);
		//의사 이름을 입력
		scanf("%s", d_name.arr);
   
   		gotoxy(48,14);
   		//의사 직급을 입력
    		scanf("%s", d_position.arr);

   		gotoxy(53,16);
   		//의사 부서 번호를 입력
    		scanf("%s", d_deptno);

   		d_name.len = strlen(d_name.arr);
   		d_position.len = strlen(d_position.arr);

		/* 부서번호 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(H_DEPT_NUMBER)
		into :d_deptno_check
		from H_DEPT
		where H_DEPT_NUMBER = :d_deptno;
		
		if (strcmp(d_deptno_check.arr, d_deptno) == 0)
			{
 				/* 실행시킬 SQL 문장*/
    				EXEC SQL INSERT INTO h_doctor (doctor_number, doctor_name, doctor_position, doctor_deptno)
    				VALUES('D'||EMPLOYEE_SEQ.NEXTVAL, :d_name, :d_position, :d_deptno);

    				EXEC SQL COMMIT WORK;

				gotoxy(33,20);
				printf("의사 계정이 추가되었습니다.");

				break;
			}
			else
			{
				gotoxy(33,20);
				printf("일치하는 부서 번호가 없습니다.");
				gotoxy(33,22);
				printf("재 입력해 주세요.");
				getch();
				system("cls");
			}
		}
}


// 간호사 계정 추가 함수
void add_nurse_account()
{
	while(1)
	{
		_putenv("NLS_LANG=American_America.KO16KSC5601");
		EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

		/* 간호사 계정 추가 화면 */
   		printf("\n");
   		print_screen("add_nurse_account.txt");

		EXEC SQL BEGIN DECLARE SECTION;
   		  char n_number[6]={""};
   		  varchar n_name[255]={""};
   		  varchar n_position[255]={""};
  		  char n_deptno[6]={""};
		  varchar n_deptno_check[6] = {""};
		EXEC SQL END DECLARE SECTION;

   		gotoxy(50,12);
  		//간호사 이름을 입력
    		scanf("%s", n_name.arr);

   		gotoxy(50,14);
   		//간호사 직급을 입력
   		 scanf("%s", n_position.arr);

   		gotoxy(55,16);
  		//간호사 부서 번호를 입력
   		 scanf("%s", n_deptno);

   		n_name.len = strlen(n_name.arr);
  		n_position.len = strlen(n_position.arr);

		/* 부서번호 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(H_DEPT_NUMBER)
		into :n_deptno_check
		from H_DEPT
		where H_DEPT_NUMBER = :n_deptno;

		if (strcmp(n_deptno_check.arr, n_deptno) == 0)
			{
   				/* 실행시킬 SQL 문장*/
    				EXEC SQL INSERT INTO h_nurse (nurse_number, nurse_name, nurse_position, nurse_deptno)
    				VALUES('N'||EMPLOYEE_SEQ.NEXTVAL, :n_name, :n_position, :n_deptno);

    				EXEC SQL COMMIT WORK;

				gotoxy(33,20);
				printf("간호사 계정이 추가되었습니다.");

				break;
			}
			else
			{
				gotoxy(33,20);
				printf("일치하는 부서 번호가 없습니다.");
				gotoxy(33,22);
				printf("재 입력해 주세요.");
				getch();
				system("cls");
			}
		}
}


// 부서 추가 함수
void add_department()
{
	while(1)
	{
		_putenv("NLS_LANG=American_America.KO16KSC5601");
		EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

		/* 부서 추가 화면 */
		printf("\n");
		print_screen("add_department.txt");

		EXEC SQL BEGIN DECLARE SECTION;
 		  char h_dept_num[6]={""};
		  varchar h_dept_n[255]={""};

 		  varchar h_dept_num_check[6]={""};
		  varchar h_dept_n_check[255]={""};
		EXEC SQL END DECLARE SECTION;

		gotoxy(48,12);
   		//부서 번호를 입력
    		scanf("%s", h_dept_num);
   
   		gotoxy(48,14);
   		//부서 이름을 입력
    		scanf("%s", h_dept_n.arr);

  		 h_dept_n.len = strlen(h_dept_n.arr);

		/* 부서 번호 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(H_DEPT_NUMBER)
		into :h_dept_num_check
		from H_DEPT
		where H_DEPT_NUMBER = :h_dept_num;
		
		if (strcmp(h_dept_num_check.arr, h_dept_num) == 0)
		{
			gotoxy(33,20);
			printf("일치하는 부서 번호가 있습니다.");
			gotoxy(33,22);
			printf("재 입력해 주세요.");
			getch();
			system("cls");

		}
		else
		{
			/* 부서 이름 판별 SQL 문장*/
			EXEC SQL SELECT TRIM(H_DEPT_NAME)
			into :h_dept_n_check
			from H_DEPT
			where H_DEPT_NAME = :h_dept_n;

			if (strcmp(h_dept_n_check.arr, h_dept_n.arr) == 0)
			{
				gotoxy(33,20);
				printf("일치하는 부서 이름이 있습니다.");
				gotoxy(33,22);
				printf("재 입력해 주세요.");
				getch();
				system("cls");
			}
			else
			{
				 /* 실행시킬 SQL 문장*/
    				EXEC SQL INSERT INTO h_dept (h_dept_number, h_dept_name)
    				VALUES(:h_dept_num, :h_dept_n);

    				EXEC SQL COMMIT WORK;

				gotoxy(33,20);
				printf("부서가 추가되었습니다.");
					
				break;

				
			}
		}
	}
}


// 의사 계정 수정 함수
void edit_doctor_account2()
{
	while(1)
	{
		EXEC SQL BEGIN DECLARE SECTION;
		  char d_num_input[6] = {""};
		  varchar d_num_check[6] = {""};
		EXEC SQL END DECLARE SECTION;

		gotoxy(62,12);
		//수정할 의사 번호를 입력
		scanf("%s", d_num_input);

		/* 의사번호 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(doctor_number)
		into :d_num_check
		from h_doctor
		where doctor_number = :d_num_input;

		if (strcmp(d_num_check.arr, d_num_input) == 0)
		{
			while(1)
			{
				system("mode con cols=125 lines=40");
				system("cls");
				printf("\n");
				print_screen("edit_doctor_account2.txt");

				EXEC SQL BEGIN DECLARE SECTION;
				  varchar d_name_edit[255]={""};
				  varchar d_position_edit[255]={""};
				  char d_deptno_edit[6]={""};
				  varchar d_deptno_edit_check[6]={""};
				EXEC SQL END DECLARE SECTION;

				gotoxy(71,15);
				//수정할 의사 이름을 입력
				scanf("%s", d_name_edit.arr);
   
   				gotoxy(71,17);
   				//수정할 의사 직급을 입력
    				scanf("%s", d_position_edit.arr);
	
   				gotoxy(76,19);
   				//수정할 의사 부서 번호를 입력
    				scanf("%s", d_deptno_edit);

   				d_name_edit.len = strlen(d_name_edit.arr);
   				d_position_edit.len = strlen(d_position_edit.arr);

				/* 부서번호 판별 SQL 문장*/
				EXEC SQL SELECT TRIM(H_DEPT_NUMBER)
				into :d_deptno_edit_check
				from H_DEPT
				where H_DEPT_NUMBER = :d_deptno_edit;

				if (strcmp(d_deptno_edit_check.arr, d_deptno_edit) == 0)
				{
 					/* 실행시킬 SQL 문장*/
					EXEC SQL UPDATE h_doctor 
					SET doctor_name = :d_name_edit, doctor_position = :d_position_edit, doctor_deptno = :d_deptno_edit
					WHERE doctor_number = :d_num_input;

					EXEC SQL COMMIT WORK;

					gotoxy(44,28);
					printf("의사 계정이 수정되었습니다.");
					getch();	
					break;
				}
				else
				{
					gotoxy(44,28);
					printf("일치하는 부서 번호가 없습니다.");

					gotoxy(44,30);
					printf("재 입력해 주세요.");

					getch();
					system("cls");
				}
			}
			break;
		}
		else
		{
			gotoxy(5,37);
			printf("일치하는 의사 번호가 없습니다. 재 입력해 주세요.");

			getch();
			system("cls");
			edit_doctor_account();
		}
	}
}


// 간호사 계정 수정 함수
void edit_nurse_account2()
{
	while(1)
	{
		EXEC SQL BEGIN DECLARE SECTION;
		  char n_num_input[6] = {""};
		  varchar n_num_check[6] = {""};
		EXEC SQL END DECLARE SECTION;

		gotoxy(62,12);
		//수정할 간호사 번호를 입력
		scanf("%s", n_num_input);

		/* 간호사 번호 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(nurse_number)
		into :n_num_check
		from h_nurse
		where nurse_number = :n_num_input;

		if (strcmp(n_num_check.arr, n_num_input) == 0)
		{
	
			while(1)
			{
				system("cls");
				printf("\n");
				print_screen("edit_nurse_account2.txt");

				EXEC SQL BEGIN DECLARE SECTION;
				  varchar n_name_edit[255]={""};
				  varchar n_position_edit[255]={""};
				  char n_deptno_edit[6]={""};
				  varchar n_deptno_edit_check[6]={""};
				EXEC SQL END DECLARE SECTION;

				gotoxy(73,15);
				//수정할 간호사 이름을 입력
				scanf("%s", n_name_edit.arr);
   
   				gotoxy(73,17);
   				//수정할 간호사 직급을 입력
    				scanf("%s", n_position_edit.arr);

   				gotoxy(78,19);
   				//수정할 간호사 부서 번호를 입력
    				scanf("%s", n_deptno_edit);

   				n_name_edit.len = strlen(n_name_edit.arr);
   				n_position_edit.len = strlen(n_position_edit.arr);

				/* 부서번호 판별 SQL 문장*/
				EXEC SQL SELECT TRIM(H_DEPT_NUMBER)
				into :n_deptno_edit_check
				from H_DEPT
				where H_DEPT_NUMBER = :n_deptno_edit;

				if (strcmp(n_deptno_edit_check.arr, n_deptno_edit) == 0)
				{
 					/* 실행시킬 SQL 문장*/
					EXEC SQL UPDATE h_nurse
					SET nurse_name = :n_name_edit, nurse_position = :n_position_edit, nurse_deptno = :n_deptno_edit
					WHERE nurse_number = :n_num_input;

					EXEC SQL COMMIT WORK;

					gotoxy(44,28);
					printf("간호사 계정이 수정되었습니다.");
					//getch();	
					break;
				}
				else
				{
					gotoxy(44,28);
					printf("일치하는 부서 번호가 없습니다.");
					gotoxy(44,30);
					printf("재 입력해 주세요.");
					getch();
					system("cls");
				}
			}	
			break;
		}
		else
		{
			gotoxy(5,37);
			printf("일치하는 간호사 번호가 없습니다. 재 입력해 주세요.");
			getch();
			system("cls");
			edit_nurse_account();
		}
	}
}


// 부서 삭제 함수
void delete_department2()
{
	while(1)
	{
		EXEC SQL BEGIN DECLARE SECTION;
		  char h_dept_num_input[6] = {""};
		  varchar h_dept_num_input_check[6]={""};
		  varchar count1[6] = {""};
		  varchar count2[6] = {""};
		EXEC SQL END DECLARE SECTION;

		gotoxy(61,12);
		//삭제할 부서 번호를 입력
		scanf("%s", h_dept_num_input);

		EXEC SQL WHENEVER SQLERROR DO printf("");

		/* 부서 번호 의사 사용여부 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(doctor_deptno)
		into :count1
		from h_doctor
		where doctor_deptno = :h_dept_num_input;

		/* 부서 번호 간호사 사용여부 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(nurse_deptno)
		into :count2
		from h_nurse
		where nurse_deptno = :h_dept_num_input;

		/* 부서 번호 판별 SQL 문장*/
		EXEC SQL SELECT TRIM(h_dept_number)
		into :h_dept_num_input_check
		from h_dept
		where h_dept_number = :h_dept_num_input;
		
		if (strcmp(h_dept_num_input_check.arr, h_dept_num_input) == 0)
		{

			if (strcmp(count1.arr, h_dept_num_input) == 0 || strcmp(count2.arr, h_dept_num_input) == 0)
			{
				gotoxy(5,37);
				printf("부서를 사용하고 있습니다. 사용중인 부서를 변경 후 삭제해주세요.");

				getch();
				system("cls");
				delete_department();
			}
			else
			{
 				/* 실행시킬 SQL 문장*/
				EXEC SQL DELETE FROM h_dept
				WHERE h_dept_number = :h_dept_num_input;

				EXEC SQL COMMIT WORK;

				gotoxy(5,37);
				printf("부서가 삭제되었습니다.               ");
				break;
			}
		}
		else
		{
			gotoxy(5,37);
			printf("일치하는 부서 번호가 없습니다. 재 입력해 주세요.");

			getch();
			system("cls");
			delete_department();
		}
	}
}


// 메인 메뉴 선택 함수
int main_menu()
{
   int choice = 0;   

   print_screen("main_menu.txt");

   gotoxy(54,9);
   //printf(" 메뉴를 선택하세요 : ");
   scanf("%d", &choice);

   return choice;
}


// 환자 관리 메뉴 선택 함수
int patient_management_menu()
{
   int choice = 0;

   print_screen("patient_management_menu.txt");

   gotoxy(54,9);
   //printf(" 환자 관리 메뉴를 선택하세요 : ");
   scanf("%d", &choice);

   return choice;
}


// 병실 관리 메뉴 선택 함수
int room_management_menu()
{
   int choice = 0;

   print_screen("room_management_menu.txt");

   gotoxy(54,9);
   //printf(" 병실 관리 메뉴를 선택하세요 : ");
   scanf("%d", &choice);

   return choice;
}


// 환자 정보 추가 함수
void AddPatient()
{
    system("cls");
    printf("\n");
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
    print_screen("insert_patient.txt");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR p_name[255]={""};
        VARCHAR p_hp[255]={""};
        VARCHAR p_rrn[255]={""};
        VARCHAR p_address[255]={""};
        VARCHAR db_name[255]={""};
        char p_room[5]={""};
        char p_pdoc[6]={""};
        int room_max=0;
        int room_now=0;
    EXEC SQL END DECLARE SECTION;

    gotoxy(21,13);
    scanf("%s", p_name.arr);    // 환자 이름

    gotoxy(25,15);
    scanf("%s", p_hp.arr);    // 환자 전화번호

    gotoxy(29,17);
    scanf("%s", p_rrn.arr);    // 환자 주민등록번호

    gotoxy(23,19);
    rewind(stdin);
    gets(p_address.arr);

    gotoxy(21,21);
    scanf("%s", p_room);    // 배정 병실

    gotoxy(21,23);
    scanf("%s", p_pdoc);    // 담당 의사

    p_name.len = strlen(p_name.arr);
    p_hp.len = strlen(p_hp.arr);
    p_rrn.len = strlen(p_rrn.arr);
    p_address.len = strlen(p_address.arr);

    EXEC SQL SELECT room_max, room_now
    INTO :room_max, :room_now
    FROM h_room
    WHERE room_number = :p_room;
    
    if (sqlca.sqlcode == 1403) {
        gotoxy(9, 26);
        printf("존재하지 않는 병실.");
    }else{
        if(room_max>room_now){
            EXEC SQL WHENEVER SQLERROR CONTINUE;
            EXEC SQL INSERT INTO h_patient (patient_number, patient_name, patient_hp, patient_rrn, patient_address, patient_roomnum, patient_pdoc, patient_enter_date)
            VALUES('P'||PATIENT_SEQ.NEXTVAL, :p_name, :p_hp, :p_rrn, :p_address, :p_room, :p_pdoc, sysdate);
            if (sqlca.sqlcode != 0) {
                gotoxy(9, 26);
                printf("이미 존재하는 환자입니다.");
            }else{
                EXEC SQL UPDATE h_room
                SET room_now = room_now+1
                WHERE room_number = :p_room;
                EXEC SQL COMMIT WORK;
            }
        }else{
            gotoxy(9 ,26);
            printf("꽉찬 병실입니다. 다른 병실을 입력해주세요.");
        }
    }
    gotoxy(5, 29);
    printf("계속하려면 아무 키나 누르세요..");
    getch();
}


// 병실 추가 함수
void add_room()
{
    _putenv("NLS_LANG=American_America.KO16KSC5601");

   system("cls");
   printf("\n");
   EXEC SQL WHENEVER SQLERROR DO printf("");
   print_screen("insert_room.txt");

    EXEC SQL BEGIN DECLARE SECTION;
        char room_num[5]={""};
        int room_max;
    EXEC SQL END DECLARE SECTION;

    gotoxy(21,13);
    scanf("%s", room_num);    // 병실 호수

    gotoxy(26,15);
    scanf("%d", &room_max);    // 병실 최대 인원

    if (room_max < 1)
    {
        gotoxy(9,17);
        printf("※ 추가 불가 ※");
        gotoxy(9,18);
        printf("병실 최대 인원은 1 보다 작을 수 없습니다.");
    }
    else
    {
        EXEC SQL INSERT INTO h_room (room_number, room_max, room_now)
        VALUES(:room_num, :room_max, 0);

        if(sqlca.sqlcode == -1)
        {
            gotoxy(9,17);
            printf("※ 추가 불가 ※");
            gotoxy(9,18);
            printf("이미 해당 병실이 있습니다.");
        }
        else
        {
            gotoxy(9,18);
            printf("병실 추가 완료");
        }
    }

    EXEC SQL COMMIT WORK;

    gotoxy(5,29);
    printf("계속하려면 아무 키나 누르세요..");
    getch();
}


// 병실 수정 함수
void update_room()
{
    _putenv("NLS_LANG=American_America.KO16KSC5601");

   EXEC SQL BEGIN DECLARE SECTION;
      varchar r_number[6] = {"no"};
      int r_max = 0;
      int r_now = 0;
      char dynstmt[1000] = {""};
      char room_num[6] = {""};
   EXEC SQL END DECLARE SECTION;

   system("cls");
   printf("\n");
   EXEC SQL WHENEVER SQLERROR DO printf("");
   print_screen("update_room.txt");

   gotoxy(55,12);
   rewind(stdin);
   gets(room_num);

   EXEC SQL SELECT TRIM(room_number), room_max, room_now
      into :r_number, :r_max, :r_now
      from H_ROOM
      where room_number = :room_num;

   if(sqlca.sqlcode==1403)
   {
      gotoxy(38,13);
      printf("※ 없는 병실 호수입니다. ※");
   }
   else
   {
      gotoxy(24, 17);
      printf("%-24s%-22d%d", r_number.arr, r_max, r_now);

      gotoxy(24,25);
      rewind(stdin);
      gets(room_num);

      gotoxy(48,25);
      rewind(stdin);
      scanf("%d", &r_max);

      if(r_max < r_now)
      {
         gotoxy(27,21);
         printf("※ 최대 인원이 현재 인원보다 작을 수 없습니다. ※");
      }
      else
      {
         gotoxy(70,25);
         printf("%d", r_now);

         EXEC SQL UPDATE H_ROOM SET ROOM_NUMBER =:room_num, ROOM_MAX =:r_max WHERE ROOM_NUMBER =:r_number;
   
         if(sqlca.sqlcode == -1)
         {
            gotoxy(34,21);
            printf("※ 중복된 병실 호수입니다. ※");
         }
         else
         {
            gotoxy(37,27);
            printf("※ 병실 정보 수정 완료 ※");
         }
      }
   }

   EXEC SQL COMMIT WORK;
   gotoxy(5,29);
   printf("계속하려면 아무 키나 누르세요..");
   getch();
}


// 병실 삭제 함수
void delete_room()
{
    _putenv("NLS_LANG=American_America.KO16KSC5601");

   EXEC SQL BEGIN DECLARE SECTION;
      varchar r_number[6] = {"no"};
      int r_max = 0;
      int r_now = 0;
      char dynstmt[1000] = {""};
      char room_num[6] = {""};
   EXEC SQL END DECLARE SECTION;

   char check[5] = {"N"};

   system("cls");
   printf("\n");
   EXEC SQL WHENEVER SQLERROR DO printf("");
   print_screen("delete_room.txt");

   gotoxy(55,12);
   rewind(stdin);
   gets(room_num);

   EXEC SQL SELECT TRIM(room_number), room_max, room_now
      into :r_number, :r_max, :r_now
      from H_ROOM
      where room_number = :room_num;

   r_number.len = strlen(r_number.arr);

   if(sqlca.sqlcode==1403)
   {
      gotoxy(38,13);
      printf("※ 없는 병실 호수입니다. ※");
   }
   else
   {
      gotoxy(24, 17);
      printf("%-24s%-22d%d", r_number.arr, r_max, r_now);

      gotoxy(55, 21);
      rewind(stdin);
      gets(check);

      if (strcmp(check,"Y")==0)
      {
         if (r_now > 0)
         {
            gotoxy(40, 23);
            printf("※ 삭제 불가 ※");
            gotoxy(30, 24);
            printf("해당 병실을 사용 중인 환자가 있습니다.");
         }
         else
         {
            EXEC SQL DELETE FROM H_ROOM WHERE ROOM_NUMBER =:r_number;
            gotoxy(35,23);
            printf("해당 병실을 삭제하였습니다.");
         }
      }
   }

   EXEC SQL COMMIT WORK;
   gotoxy(5,29);
   printf("계속하려면 아무 키나 누르세요..");
   getch();
}


// 환자 퇴원 함수
#define PAGE_NUM 8
void goLeave(char userNum[6]) {

	system("mode con cols=125 lines=40");
	EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR p_number[255] = { "" };
	VARCHAR p_name[255] = { "" };
	VARCHAR p_hp[255] = { "" };
	VARCHAR p_rrn[255] = { "" };
	VARCHAR p_address[255] = { "" };
	char p_roomnum[5] = { "" };
	char p_pdoc[6] = { "" };
	VARCHAR p_enter_date[255] = { "" };
	VARCHAR p_leave_date[255] = { "" };
	VARCHAR nums[255] = { "" };
	VARCHAR names[255] = { "" };
	VARCHAR userNumm[255] = { "" };
	char dynstmt[1000] = { "" };
	short indicator;   // 지시자 변수(null 필드 처리 용도)
	EXEC SQL END DECLARE SECTION;

	int x, y, i, count = 0;

	system("cls");
	printf("\n");
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	print_screen("leave_patient.txt");

	char roomN[50][5]={""};

	strcpy(userNumm.arr, userNum);
	userNumm.len = strlen(userNumm.arr);

	gotoxy(49, 12);
	rewind(stdin);
	gets(nums.arr);
	nums.len = strlen(nums.arr);

	gotoxy(87, 12);
	rewind(stdin);
	gets(names.arr);
	names.len = strlen(names.arr);

	sprintf(dynstmt, "SELECT * FROM H_PATIENT where patient_pdoc = '%s' and patient_number LIKE '%%%s%%' and patient_name LIKE '%%%s%%' and patient_leave_date is null", userNumm.arr, nums.arr, names.arr);
	EXEC SQL PREPARE S FROM : dynstmt;

	EXEC SQL DECLARE s_cursor CURSOR FOR S;

	EXEC SQL OPEN s_cursor;

	x = 4;
	y = 18;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	for (;;)
	{
		EXEC SQL FETCH s_cursor INTO : p_number, : p_name, : p_hp, : p_rrn, : p_address, : p_roomnum, : p_pdoc, : p_enter_date, : p_leave_date INDICATOR : indicator;
		p_number.arr[p_number.len] = '\0';
		p_name.arr[p_name.len] = '\0';
		p_hp.arr[p_hp.len] = '\0';
		p_rrn.arr[p_rrn.len] = '\0';
		p_address.arr[p_address.len] = '\0';
		p_enter_date.arr[p_enter_date.len] = '\0';
		p_leave_date.arr[p_leave_date.len] = '\0';

		strcpy(roomN[count], p_roomnum);

		gotoxy(x, y);
		printf("%-9s %-10s %-16s %-15s %-5s %-9s %-10s %-10s %-20s", p_number.arr, p_name.arr, p_hp.arr, p_rrn.arr, p_roomnum, p_pdoc, p_enter_date.arr, p_leave_date.arr, p_address.arr);
		y += 2;
		count++;

		if (count == PAGE_NUM)
		{
			count = 0;
			getch();

			gotoxy(4, 18); //이전 화면 부분 클리어
			for (i = 0; i < PAGE_NUM * 2; i++)
			{
				printf("│                                                                                                                       │\n");
			}
			y = 18;
		}
	}

	EXEC SQL CLOSE s_cursor;   // 커서에 할당된 자원을 해제함.

	gotoxy(4, 37);
	printf("조회된 환자 : %d", count);
	gotoxy(78, 37);
	int st = 0;
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	if (count != 0) {
		printf("다음 환자를 퇴원처리 하시겠습니까? [y / n]   ");
		char bool;
		rewind(stdin);
		scanf("%c", &bool);
		if (bool == 'y') {
			EXEC SQL UPDATE h_patient
				SET patient_leave_date = sysdate
				WHERE(patient_pdoc = '' || :userNumm || '') and (patient_number LIKE '%' || :nums || '%') and (patient_name LIKE '%' || :names || '%') and (patient_leave_date is null);
			for(;;){
				strcpy(p_roomnum, roomN[st]);
				EXEC SQL WHENEVER NOT FOUND DO BREAK;
				EXEC SQL UPDATE h_room
				SET room_now = room_now-1
				WHERE(room_number=:p_roomnum);
				st++;
			}
			gotoxy(78, 37);
			printf("퇴원처리 되었습니다.                       ");
		}
		else if (bool == 'n') {
			gotoxy(78, 37);
			printf("취소하였습니다.                       ");
		}
		EXEC SQL COMMIT WORK;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결은 종료하지 않음.
	}
	getch();

}


// 퇴원환자 삭제
void DeletePatient(char userNum[6])
{
    #define PAGE_NUM 7
    system("mode con cols=125 lines=40");
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR p_number[255]={""};
        VARCHAR p_name[255]={""};
        VARCHAR p_hp[255]={""};
        VARCHAR p_rrn[255]={""};
        VARCHAR p_address[255]={""};
        char p_room[5]={""};
        char p_pdoc[6]={""};
        VARCHAR p_enter[255]={""};
        VARCHAR p_leave[255]={""};
        VARCHAR day[10]={""};
        VARCHAR nums[255]={""}; 
        VARCHAR names[255]={""}; 
        VARCHAR userNumm[255]={""}; 
        char dynstmt[1000] = {""};
        short indicator;   // 지시자 변수(null 필드 처리 용도)
    EXEC SQL END DECLARE SECTION;
   
    char cases;
    int x, y, i, count = 0;

    system("cls");
    printf("\n");

    print_screen("delete_patient.txt");
    
    gotoxy(71,12);
    rewind(stdin);
    gets(day.arr);
    day.len = strlen(day.arr);
    
    strcpy(userNumm.arr, userNum);
    userNumm.len = strlen(userNumm.arr);
    
    if(day.len == 0){
        
        gotoxy(49,14);
        rewind(stdin);
        gets(nums.arr);
        nums.len = strlen(nums.arr);

        gotoxy(87,14);
        rewind(stdin);
        gets(names.arr);
        names.len = strlen(names.arr);

        if(userNum[0] == 'D'){
            cases = 'c';
            sprintf(dynstmt,"SELECT patient_number, patient_name, patient_hp, patient_rrn, patient_address, patient_roomnum, patient_pdoc, to_char(patient_enter_date, 'YY/MM/DD'), to_char(patient_leave_date, 'YY/MM/DD') FROM H_PATIENT where patient_pdoc = '%s' and patient_number LIKE '%%%s%%' and patient_name LIKE '%%%s%%'", userNum, nums.arr, names.arr);
        }else{
            cases = 'b';
            sprintf(dynstmt,"SELECT patient_number, patient_name, patient_hp, patient_rrn, patient_address, patient_roomnum, patient_pdoc, to_char(patient_enter_date, 'YY/MM/DD'), to_char(patient_leave_date, 'YY/MM/DD') FROM H_PATIENT where patient_number LIKE '%%%s%%' and patient_name LIKE '%%%s%%'", nums.arr, names.arr);
        }
    }else{
        cases = 'a';
        sprintf(dynstmt, "SELECT patient_number, patient_name, patient_hp, patient_rrn, patient_address, patient_roomnum, patient_pdoc, to_char(patient_enter_date, 'YY/MM/DD'), to_char(patient_leave_date, 'YY/MM/DD') FROM h_patient WHERE patient_leave_date < sysdate- to_number(%s)", day.arr);
    }
    x = 4;
    y = 20;

    EXEC SQL PREPARE S FROM :dynstmt;
    EXEC SQL DECLARE patient_cursor CURSOR FOR S;
    EXEC SQL OPEN patient_cursor;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    for (;;) 
    {
        EXEC SQL FETCH patient_cursor
        INTO :p_number, :p_name, :p_hp, :p_rrn, :p_address, :p_room, :p_pdoc, :p_enter, :p_leave
        INDICATOR :indicator;
        p_number.arr[p_number.len] = '\0';
        p_name.arr[p_name.len] = '\0';
        p_hp.arr[p_hp.len] = '\0';
        p_rrn.arr[p_rrn.len] = '\0';
        p_address.arr[p_address.len] = '\0';
        p_enter.arr[p_enter.len] = '\0';
        p_leave.arr[p_leave.len] = '\0';  

        gotoxy(x,y);
        printf("%-9s %-10s %-16s %-15s %-5s %-9s %-10s %-10s %-20s", p_number.arr, p_name.arr, p_hp.arr, p_rrn.arr, p_room, p_pdoc, p_enter.arr, p_leave.arr, p_address.arr);
        y+=2;
        count++;

        if( count%PAGE_NUM==0)
        {
            getch();
       
            gotoxy(4, 20); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM*2; i++){
                printf("│                                                                                                                       │\n");
            }
            y = 20;
        }
    }
    EXEC SQL CLOSE patient_cursor;

    gotoxy(4,37);
    if(day.len == 0){
        printf("조회된 환자 : %d", count);
    }else{
        printf("보관 기한 지난 퇴원환자 : %d", count);
    }
    gotoxy(80,37);

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    if (count != 0){
        printf("데이터를 삭제하시겠습니까? [y / n]   ");
        char bool;
        rewind(stdin);
        scanf("%c", &bool);

        if (bool == 'y'){
            if (cases == 'a'){
                EXEC SQL DELETE FROM h_patient
                WHERE patient_leave_date < sysdate - to_number(:day);
            }else if (cases == 'b'){
                EXEC SQL DELETE FROM h_patient
                WHERE patient_number like '%'||:nums||'%' and patient_name like '%'||:names||'%';
            }else{
                EXEC SQL DELETE FROM h_patient
                WHERE (patient_pdoc=''||:userNumm||'') and (patient_number LIKE '%'||:nums||'%') and (patient_name LIKE '%'||:names||'%');
            }
            EXEC SQL COMMIT WORK;

            gotoxy(80,37);
            printf("삭제되었습니다.                      ");
        }else if(bool=='n'){
            gotoxy(80,37);
            printf("취소하였습니다.                      ");
        }
    }
    getch();
}



// 병실 조회 함수
#define ROOM_PAGE_NUM 5
void select_room()
{
    _putenv("NLS_LANG=American_America.KO16KSC5601");

   EXEC SQL BEGIN DECLARE SECTION;
      varchar r_number[6] = {""};
      int r_max;
      int r_now;
      char dynstmt[1000] = {""};
   EXEC SQL END DECLARE SECTION;

   char room_num[6] = "";
   int x, y, i, count = 0;

   system("cls");
   printf("\n");
   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   print_screen("select_room.txt");

   gotoxy(55,12);
   rewind(stdin);
   gets(room_num);

   sprintf(dynstmt,"SELECT TRIM(room_number), room_max, room_now FROM H_ROOM where room_number LIKE '%%%s%%'", room_num);

   EXEC SQL PREPARE S FROM :dynstmt;

   EXEC SQL DECLARE r_cursor CURSOR FOR S;

   EXEC SQL OPEN r_cursor;

   EXEC SQL WHENEVER NOT FOUND DO break;
   
   x = 24;
   y = 17;

   for (;;)
   {
      EXEC SQL FETCH r_cursor INTO :r_number, :r_max, :r_now;
      r_number.arr[r_number.len] = '\0';

      gotoxy(x,y);
      printf("%-24s%-22d%d", r_number.arr, r_max, r_now);
      y+=2;
      count++;

      if(count == ROOM_PAGE_NUM)
      {
         count = 0;
         getch();
      
         gotoxy(0, 17); //이전 화면 부분 클리어
         for(i= 0; i < ROOM_PAGE_NUM*2 - 1; i++)
         {
             printf("│              │                                                                 │             │\n");
         }
         y = 17;
      }
   }

   EXEC SQL CLOSE r_cursor;   // 커서에 할당된 자원을 해제함.

   EXEC SQL COMMIT WORK;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결은 종료하지 않음.

   gotoxy(5,29);
   printf("계속하려면 아무 키나 누르세요..");
   getch();
}


// 의사 계정 수정 전 전체조회 함수
#define PAGE_NUM 9
void edit_doctor_account()
{
	system("mode con cols=125 lines=40");
	EXEC SQL BEGIN DECLARE SECTION;
	  char d_num[6]={""};
	  varchar d_name[255]={""};
	  varchar d_position[255]={""};
	  char d_deptno[6]={""};
 
	  char dynstmt[1000] = {""};
	EXEC SQL END DECLARE SECTION;

	int x, y, i, count = 0;

   	system("cls");
   	printf("\n");
   	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   	print_screen("edit_doctor_account.txt");

   	sprintf(dynstmt,"SELECT * FROM h_doctor");

   	EXEC SQL PREPARE S FROM :dynstmt;
   	EXEC SQL DECLARE c_cursor2 CURSOR FOR S;
   	EXEC SQL OPEN c_cursor2;
	EXEC SQL WHENEVER NOT FOUND DO break;
	
	x = 21;
   	y = 18;

   	for (;;)
  	{
      		EXEC SQL FETCH c_cursor2 INTO :d_num, :d_name, :d_position, :d_deptno;
     		d_name.arr[d_name.len] = '\0';
     		d_position.arr[d_position.len] = '\0';

     		gotoxy(x,y);
      		printf("%-10s %-17s %-21s %-8s", d_num, d_name.arr, d_position.arr, d_deptno);
      		y+=2;
      		count++;

      		if( count == PAGE_NUM)
      		{
         			count = 0;
         			getch();
     
        			gotoxy(21, 18); //이전 화면 부분 클리어
         			for(i= 0; i < PAGE_NUM*2; i++)
        			 {
             			printf("│              │                                                                  │            │\n");
         			 }
         			 y = 18;
	
      		}

	}

   	gotoxy(5,37);
   	printf("계속하려면 아무 키나 누르세요..");
   	getch();
   	gotoxy(5,37);
   	printf("                                                   ");

	EXEC SQL CLOSE c_cursor2;   // 커서에 할당된 자원을 해제함.
	EXEC SQL COMMIT WORK;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결은 종료하지 않음.

	edit_doctor_account2();
}


// 간호사 계정 수정 전 전체조회 함수
#define PAGE_NUM 9
void edit_nurse_account()
{
	system("mode con cols=125 lines=40");
	EXEC SQL BEGIN DECLARE SECTION;
	  char n_num[6]={""};
	  varchar n_name[255]={""};
	  varchar n_position[255]={""};
	  char n_deptno[6]={""};

	  char dynstmt[1000] = {""};
	EXEC SQL END DECLARE SECTION;

	int x, y, i, count = 0;

   	system("cls");
   	printf("\n");
   	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   	print_screen("edit_nurse_account.txt");

   	sprintf(dynstmt,"SELECT * FROM h_nurse");

   	EXEC SQL PREPARE S FROM :dynstmt;
   	EXEC SQL DECLARE c_cursor3 CURSOR FOR S;
   	EXEC SQL OPEN c_cursor3;
	EXEC SQL WHENEVER NOT FOUND DO break;

   	x = 21;
   	y = 18;

   	for (;;)
  	{
      		EXEC SQL FETCH c_cursor3 INTO :n_num, :n_name, :n_position, :n_deptno;
     		n_name.arr[n_name.len] = '\0';
     		n_position.arr[n_position.len] = '\0';

     		gotoxy(x,y);
      		printf("%-10s %-17s %-21s %-8s", n_num, n_name.arr, n_position.arr, n_deptno);
      		y+=2;
      		count++;

      		if( count == PAGE_NUM)
      		{
         			count = 0;
         			getch();
      
        			 gotoxy(21, 18); //이전 화면 부분 클리어
         			for(i= 0; i < PAGE_NUM*2; i++)
        			 {
             			printf("│              │                                                                  │            │\n");
         			 }
         			 y = 18;

      		}

	}
   	gotoxy(5,37);
   	printf("계속하려면 아무 키나 누르세요..");
   	getch();
   	gotoxy(5,37);
   	printf("                                                   ");

	EXEC SQL CLOSE c_cursor3;   // 커서에 할당된 자원을 해제함.
	EXEC SQL COMMIT WORK;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결은 종료하지 않음.

	edit_nurse_account2();
}


// 부서 삭제 전 조회 함수
#define PAGE_NUM 9
void delete_department()
{
	system("mode con cols=125 lines=40");
	EXEC SQL BEGIN DECLARE SECTION;
	  char h_dept_num[6]={""};
	  varchar h_dept_n[255]={""};

	  char dynstmt[1000] = {""};
	EXEC SQL END DECLARE SECTION;

	int x, y, i, count = 0;

   	system("cls");
   	printf("\n");
   	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   	print_screen("delete_department.txt");

   	sprintf(dynstmt,"SELECT * FROM h_dept");

   	EXEC SQL PREPARE S FROM :dynstmt;
   	EXEC SQL DECLARE c_cursor4 CURSOR FOR S;
   	EXEC SQL OPEN c_cursor4;
	EXEC SQL WHENEVER NOT FOUND DO break;

   	x = 35;
   	y = 18;

   	for (;;)
  	{
      		EXEC SQL FETCH c_cursor4 INTO :h_dept_num, :h_dept_n;
     		h_dept_n.arr[h_dept_n.len] = '\0';

     		gotoxy(x,y);
      		printf("%-13s %-20s", h_dept_num, h_dept_n.arr);
      		y+=2;
      		count++;

      		if( count == PAGE_NUM)
      		{
         			count = 0;
         			getch();
      
        			gotoxy(35, 18); //이전 화면 부분 클리어
         			for(i= 0; i < PAGE_NUM*2; i++)
        			 {
             			printf("│                            │                                       │                         │\n");
         			 }
         			 y = 18;

      		}

	}
   	gotoxy(5,37);
   	printf("계속하려면 아무 키나 누르세요..");
   	getch();
   	gotoxy(5,37);
   	printf("                                                   ");

	EXEC SQL CLOSE c_cursor4;   // 커서에 할당된 자원을 해제함.
	EXEC SQL COMMIT WORK;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결은 종료하지 않음.

	delete_department2();
}

// 환자 정보 조회 함수
#define PAGE_NUM 9
void select_patient(char userNum[6])
{
   system("mode con cols=125 lines=40");
   EXEC SQL BEGIN DECLARE SECTION;
      char p_number[6] = {""};
      varchar p_name[255] = {""};
      varchar p_hp[255] = {""};
      varchar p_rrn[255] = {""};
      varchar p_address[255] = {""};
      char p_roomnum[5] = {""};
      char p_pdoc[6] = {""};
      varchar p_enter_date[255] = {""};
      varchar p_leave_date[255] = {""};
      char dynstmt[1000] = {""};
      short indicator;   // 지시자 변수(null 필드 처리 용도)
   EXEC SQL END DECLARE SECTION;

   char num[20] = {""};
   varchar name[255] = {""};
   int x, y, i, count = 0;

   system("cls");
   printf("\n");
   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   EXEC SQL WHENEVER SQLERROR DO printf("");
   print_screen("select_patient.txt");

   gotoxy(49,12);
   rewind(stdin);
   gets(num);

   gotoxy(87,12);
   rewind(stdin);
   gets(name);

   if(userNum[0] == 'D')
   {
      sprintf(dynstmt,"SELECT * FROM H_PATIENT where patient_pdoc = '%s' and patient_number LIKE '%%%s%%' and patient_name LIKE '%%%s%%'", userNum, num, name);
   }
   else
   {
      sprintf(dynstmt,"SELECT * FROM H_PATIENT where patient_number LIKE '%%%s%%' and patient_name LIKE '%%%s%%'", num, name);
   }
   EXEC SQL PREPARE S FROM :dynstmt;

   EXEC SQL DECLARE c_cursor CURSOR FOR S;
   
   EXEC SQL OPEN c_cursor;

   x = 4;
   y = 18;

   for (;;)
   {
      if (sqlca.sqlcode == 1403) {
        break;
      }

      EXEC SQL FETCH c_cursor INTO :p_number, :p_name, :p_hp, :p_rrn, :p_address, :p_roomnum, :p_pdoc, :p_enter_date, :p_leave_date INDICATOR :indicator;
      p_name.arr[p_name.len] = '\0';
      p_hp.arr[p_hp.len] = '\0';
      p_rrn.arr[p_rrn.len] = '\0';
      p_address.arr[p_address.len] = '\0';
      p_enter_date.arr[p_enter_date.len] = '\0';
      p_leave_date.arr[p_leave_date.len] = '\0';

      if(indicator==-1)
      {
         strcpy(p_leave_date.arr, "NULL");
      }

      gotoxy(x,y);
      printf("%-9s %-10s %-16s %-15s %-5s %-9s %-10s %-10s %-20s", p_number, p_name.arr, p_hp.arr, p_rrn.arr, p_roomnum, p_pdoc, p_enter_date.arr, p_leave_date.arr, p_address.arr);
      y+=2;
      count++;

      if( count == PAGE_NUM)
      {
         count = 0;
         getch();
      
         gotoxy(4, 18); //이전 화면 부분 클리어
         for(i= 0; i < PAGE_NUM*2; i++)
         {
             printf("│                                                                                                                       │\n");
         }
         y = 18;
      }
   }

   EXEC SQL CLOSE c_cursor;   // 커서에 할당된 자원을 해제함.

   EXEC SQL COMMIT WORK;   // 현재 진행중인 트랜잭션을 커밋하고 데이터베이스 연결은 종료하지 않음.

   gotoxy(5,37);
   printf("계속하려면 아무 키나 누르세요..");
   getch();
}


// 환자 정보 수정 함수
void update_patient(char userNum[6])
{
	system("mode con cols=125 lines=40");

	EXEC SQL BEGIN DECLARE SECTION;
		char p_number[10] = { "" };
		char user_number[6] = {""};
		int room_max = 0;
		int room_now = 0;
		VARCHAR p_name[50] = { "" };
		VARCHAR p_hp[50] = { "" };
		VARCHAR p_rrn[50] = { "" };
		VARCHAR p_address[55] = { "" };
		char p_room[5] = { "" };
		char p_room2[5] = { "" };
		char p_pdoc[6] = { "" };
		VARCHAR p_ed[55] = { "" };
		VARCHAR p_ld[55] = { "" };
		short indicator;   // 지시자 변수(null 필드 처리 용도)
	EXEC SQL END DECLARE SECTION;

	system("cls");
	EXEC SQL WHENEVER SQLERROR DO printf("");
	EXEC SQL WHENEVER NOT FOUND DO printf("");
	print_screen("update_patient.txt");

	gotoxy(46, 13);
	printf("의사는 담당 환자만 수정 가능합니다.");

	gotoxy(49, 11);
	rewind(stdin);
	gets(p_number);

	gotoxy(87, 11);
	rewind(stdin);
	gets(p_name.arr);
	p_name.len = strlen(p_name.arr);
	strcpy(user_number,userNum);

	if (userNum[0] == 'N')
	{
		EXEC SQL SELECT *
			INTO :p_number, :p_name, :p_hp, :p_rrn, :p_address, :p_room, :p_pdoc, :p_ed, :p_ld INDICATOR :indicator
			FROM H_PATIENT WHERE PATIENT_NAME = :p_name AND PATIENT_NUMBER = :p_number;
	}
	else if(userNum[0] == 'D')
	{
		EXEC SQL SELECT *
			INTO :p_number, :p_name, :p_hp, :p_rrn, :p_address, :p_room, :p_pdoc, :p_ed, :p_ld INDICATOR :indicator
			FROM H_PATIENT WHERE PATIENT_PDOC = :user_number and PATIENT_NAME = : p_name AND PATIENT_NUMBER = : p_number;
	}

	if(indicator==-1)
	{
		strcpy(p_ld.arr, "NULL");
	}

	if(sqlca.sqlcode==1403)
	{
		gotoxy(36, 13);
		printf("수정을 원하는 환자 정보가 없습니다. 다시 확인하고 오세요.\n");
		getch();
	}
	else
	{
		// 조회한 환자 정보 출력
		gotoxy(4, 18);
		printf("%-9s %-10s %-16s %-15s %-5s %-9s %-10s %-10s %-20s", p_number, p_name.arr, p_hp.arr, p_rrn.arr, p_room, p_pdoc, p_ed.arr, p_ld.arr, p_address.arr);

		// 수정할 환자 정보 입력 (공백 입력되면 바꾸기 전 값이 그대로 들어감)
		gotoxy(4, 26);
		printf("%s", p_number);

		VARCHAR p_name2[50] = {""};
		strcpy(p_name2,p_name.arr);
		gotoxy(14, 26);
		rewind(stdin);
		gets(p_name.arr);
		if(strcmp(p_name.arr,"")==0) { gotoxy(14, 26); printf("%s", p_name2); strcpy(p_name.arr, p_name2); }

		VARCHAR p_hp2[50] = { "" };
		strcpy(p_hp2,p_hp.arr);
		gotoxy(25, 26);
		rewind(stdin);
		gets(p_hp.arr);
		if(strcmp(p_hp.arr,"")==0) { gotoxy(25, 26); printf("%s", p_hp2); strcpy(p_hp.arr, p_hp2); }

		VARCHAR p_rrn2[50] = { "" };
		strcpy(p_rrn2,p_rrn.arr);
		gotoxy(42, 26);
		rewind(stdin);
		gets(p_rrn.arr);
		if(strcmp(p_rrn.arr,"")==0) { gotoxy(42, 26); printf("%s", p_rrn2); strcpy(p_rrn.arr, p_rrn2); }

		strcpy(p_room2,p_room);
		gotoxy(58, 26);
		rewind(stdin);
		gets(p_room);
		if(strcmp(p_room,"")==0) { gotoxy(58, 26); printf("%s", p_room2); strcpy(p_room, p_room2); }

		char p_pdoc2[6] = { "" };
		strcpy(p_pdoc2,p_pdoc);
		gotoxy(64, 26);
		rewind(stdin);
		gets(p_pdoc);
		if(strcmp(p_pdoc,"")==0) { gotoxy(64, 26); printf("%s", p_pdoc2); strcpy(p_pdoc, p_pdoc2); }

		gotoxy(74, 26);
		printf(p_ed.arr);

		gotoxy(85, 26);
		printf(p_ld.arr);

		VARCHAR p_address2[55] = { "" };
		strcpy(p_address2,p_address.arr);
		gotoxy(97, 26);
		rewind(stdin);
		gets(p_address.arr);
		if(strcmp(p_address.arr,"")==0) { gotoxy(97, 26); printf("%s", p_address2); strcpy(p_address.arr, p_address2); }

		p_name.len = strlen(p_name.arr);
		p_hp.len = strlen(p_hp.arr);
		p_rrn.len = strlen(p_rrn.arr);
		p_address.len = strlen(p_address.arr);
		p_ed.len = strlen(p_ed.arr);
		p_ld.len = strlen(p_ld.arr);

		EXEC SQL SELECT ROOM_MAX, ROOM_NOW
			INTO : room_max, : room_now
			FROM H_ROOM WHERE ROOM_NUMBER = : p_room;
		if(sqlca.sqlcode==1403)
		{
			gotoxy(43, 30);
			printf("입력 양식이 잘못 되었거나 없는 병실입니다.\n");
			gotoxy(48, 31);
			printf("입력양식은 0000입니다.\n");
			getch();
		}
		else
		{
			if (room_max == room_now)
			{
				gotoxy(42, 31);
				printf("해당 병실은 다 찼습니다. 정보를 다시 입력하세요");
				getch();
			}
			else
			{
				EXEC SQL UPDATE H_PATIENT SET PATIENT_NAME = :p_name, PATIENT_HP = : p_hp, PATIENT_RRN = : p_rrn, PATIENT_ADDRESS = : p_address, PATIENT_ROOMNUM = : p_room, PATIENT_PDOC = : p_pdoc WHERE PATIENT_NUMBER = : p_number;
				if (sqlca.sqlcode == -1) {
					gotoxy(40, 28);
					printf("주민번호가 중복됩니다! 회원정보 수정을 종료합니다. \n");
					getch();
				}
				else if (sqlca.sqlcode == -2291) {
					gotoxy(40, 30);
					printf("입력양식이 잘못되었거나 혹은 없는 의사번호 입니다 \n");
					gotoxy(48, 31);
					printf("입력양식은 D0000입니다. \n");
					getch();
				}
				else {
					room_now += 1;
					EXEC SQL UPDATE H_ROOM SET ROOM_NOW = :room_now WHERE ROOM_NUMBER = :p_room;

					EXEC SQL SELECT ROOM_NOW
						INTO : room_now
						FROM H_ROOM WHERE ROOM_NUMBER = : p_room2;

					room_now -= 1;
					EXEC SQL UPDATE H_ROOM SET ROOM_NOW = :room_now WHERE ROOM_NUMBER = :p_room2;

					EXEC SQL COMMIT WORK;
					gotoxy(43, 31);
					printf("정상적으로 수정이 완료되었습니다.");
					getch();
				}

			}
		}
	}
}


// 화면 출력 함수
void print_screen(char fname[])
{
   FILE *fp;
   char line[100];

   if ( (fp = fopen(fname,"r"))  == NULL ){
      printf("file open error\n");
      getch();
      exit(-1);
   }
   while(1)
   {
      if( fgets(line, 99, fp) == NULL){
           break;
      }
      printf("%s", line);
   }

   fclose(fp);
}


// SQL오류 처리 함수
/* --------------------------------------------------------------------------
int sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char *msg)
{
    char err_msg[128];
    size_t buf_len, msg_len;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);

    getch();
    EXEC SQL ROLLBACK WORK;
    //exit(EXIT_FAILURE);
}


/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

void gotoxy(int x, int y)
{
    COORD Cur= {(SHORT)x, (SHORT) y};

    SetConsoleCursorPosition(STD_HANDLE, Cur);
}

void getxy(int *x, int *y)
{
    CONSOLE_SCREEN_BUFFER_INFO Buf ;

    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
    *x = (int)Buf.dwCursorPosition.X ;
    *y = (int)Buf.dwCursorPosition.Y ;
 
}

/*---------------------------------------------------------*/